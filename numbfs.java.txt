Package Assign4-graps;
import java.util.*;

class Graph
{

int V;


Vector<Integer>[] adj;


@SuppressWarnings("unchecked")
Graph(int V)
{
	adj = new Vector[V];
	for (int i = 0; i < adj.length; i++)
	{
	adj[i] = new Vector<>();
	}
	this.V = V;
}

void addEdge(int v, int w)
{

	
	adj[v].add(w);

	adj[w].add(v);
}

int BFS(int s, int l)
{

	
	boolean[] visited = new boolean[V];
	int[] level = new int[V];

	for (int i = 0; i < V; i++)
	{
	visited[i] = false;
	level[i] = 0;
	}

	
	Queue<Integer> queue = new LinkedList<>();

	
	visited[s] = true;
	queue.add(s);
	level[s] = 0;
	int count = 0;
	while (!queue.isEmpty())
	{

	
	s = queue.peek();
	queue.poll();

	Vector<Integer> list = adj[s];
	
	for (int i : list)
	{
		if (!visited[i])
		{
		visited[i] = true;
		level[i] = level[s] + 1;
		queue.add(i);
		}
	}

	count = 0;
	for (int i = 0; i < V; i++)
		if (level[i] == l)
		count++;
	}
	return count;
}
}
class bfs {


public static void main(String[] args)
{

	
	Graph g = new Graph(6);
	g.addEdge(0, 1);
	g.addEdge(0, 2);
	g.addEdge(1, 3);
	g.addEdge(2, 4);
	g.addEdge(2, 5);
	int level = 2;
	System.out.print(g.BFS(0, level));
}
}


